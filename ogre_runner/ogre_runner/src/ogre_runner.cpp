/*
-----------------------------------------------------------------------------
Filename:    ogre_runner.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "ogre_runner.h"

//-------------------------------------------------------------------------------------
ogre_runner::ogre_runner(void)
{
}
//-------------------------------------------------------------------------------------
ogre_runner::~ogre_runner(void)
{
}

//-------------------------------------------------------------------------------------
void ogre_runner::createScene(void)
{
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0, 0, 0));
    mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);
	
	//setja inn ninju
    Ogre::Entity* entNinja = mSceneMgr->createEntity("Ninja", "ninja.mesh");
    entNinja->setCastShadows(true);
    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entNinja);

	// setja inn ninju
	Ogre::Entity* ninja = mSceneMgr->createEntity( "ninja", "penguin.mesh" );
	// ninjan settur a chord 100,0,0
	Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "ninja", Ogre::Vector3( 100, 0, 0 ) );
	headNode2->attachObject( ninja );
	// snua ninjuni
	//teleport
	if(headNode2->getPosition() == Ogre::Vector3(100, 0, 0))
	{
		headNode2->translate(500, 0, 0);
	}

	//headNode2->yaw( Ogre::Degree( 90 ));
	
	// bua til plan
    Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
	Ogre::Plane planeA(Ogre::Vector3::UNIT_X, -750);
 
    Ogre::MeshManager::getSingleton().createPlane("ground", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
        plane, 1500, 1500, 200, 200, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);

	Ogre::MeshManager::getSingleton().createPlane("wall", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
        planeA, 1500, 1500, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
 
    Ogre::Entity* entGround = mSceneMgr->createEntity("GroundEntity", "ground");
    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entGround);

	Ogre::Entity* entWall = mSceneMgr->createEntity("WallEntity", "wall");
    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entWall);
 
 
    entGround->setMaterialName("Examples/Rockwall");
    entGround->setCastShadows(false);

	entWall->setMaterialName("Examples/Rockwall");
    entWall->setCastShadows(false);

	// setja inn skybox
	mSceneMgr->setSkyBox(true, "Examples/SpaceSkyBox", 500);

    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5f, 0.5f, 0.5f));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
	
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        ogre_runner app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
